{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ModelChecker Jupyter Integration Demo\n",
    "\n",
    "This notebook demonstrates how to use the interactive features of ModelChecker in Jupyter notebooks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Basic Import and Setup\n",
    "\n",
    "First, we'll import the notebook module from ModelChecker:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'model_checker.notebook'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmodel_checker\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnotebook\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m InteractiveModelExplorer, check_formula\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'model_checker.notebook'"
     ]
    }
   ],
   "source": [
    "from model_checker.notebook import InteractiveModelExplorer, check_formula"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Quick Formula Checking\n",
    "\n",
    "For simple formula checks, we can use the `check_formula` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'check_formula' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Check a simple propositional formula\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43mcheck_formula\u001b[49m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mp → (q → p)\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'check_formula' is not defined"
     ]
    }
   ],
   "source": [
    "# Check a simple propositional formula\n",
    "check_formula(\"p → (q → p)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check a modal formula\n",
    "check_formula(\"□(p → q) → (□p → □q)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check validity with premises\n",
    "check_formula(\"q\", premises=[\"p\", \"p → q\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Interactive Model Explorer\n",
    "\n",
    "For more interactive exploration, we can use the `InteractiveModelExplorer` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an explorer with the default theory\n",
    "explorer = InteractiveModelExplorer()\n",
    "\n",
    "# Display the interactive UI\n",
    "explorer.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Exploring Different Theories\n",
    "\n",
    "ModelChecker supports multiple logical theories. Let's check the same formula in different theories:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check in default theory\n",
    "check_formula(\"□p → p\", theory_name=\"default\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check in exclusion theory\n",
    "check_formula(\"□p → p\", theory_name=\"exclusion\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Customizing Model Settings\n",
    "\n",
    "We can customize various model settings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check with custom settings\n",
    "custom_settings = {\n",
    "    'N': 4,  # Number of atomic propositions\n",
    "    'max_time': 10,  # Maximum solving time\n",
    "    'contingent': True,  # Use contingent valuations\n",
    "    'non_empty': True,  # Ensure non-empty valuations\n",
    "}\n",
    "\n",
    "check_formula(\"p ∨ q ∨ r ∨ s\", settings=custom_settings)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Getting the Model Output as HTML\n",
    "\n",
    "We can get the model output as HTML for further processing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an explorer and check a formula\n",
    "explorer = InteractiveModelExplorer()\n",
    "explorer.formula_input.value = \"p ∧ q\"\n",
    "explorer.check_button.click()\n",
    "\n",
    "# Get the HTML output\n",
    "html_output = explorer.get_output()\n",
    "\n",
    "# Display a portion of it\n",
    "html_snippet = html_output[:500] + \"...\" if len(html_output) > 500 else html_output\n",
    "print(f\"HTML output (first 500 chars): {html_snippet}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Advanced Usage: Working with Multiple Models\n",
    "\n",
    "We can find and explore multiple models for the same formula:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from model_checker.notebook import check_formula_interactive\n",
    "\n",
    "# Create an interactive explorer for a specific formula\n",
    "multi_explorer = check_formula_interactive(\"◇p ∧ ◇¬p\")\n",
    "\n",
    "# The explorer is returned, allowing further interaction\n",
    "multi_explorer.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can click the \"Find Next Model\" button to explore alternative models for the formula."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Conclusion\n",
    "\n",
    "This notebook demonstrated the key features of the ModelChecker Jupyter integration:\n",
    "\n",
    "1. Quick formula checking with `check_formula`\n",
    "2. Interactive exploration with `InteractiveModelExplorer`\n",
    "3. Comparing formulas across different theories\n",
    "4. Customizing model settings\n",
    "5. Finding and exploring multiple models\n",
    "\n",
    "The integration makes it easy to use ModelChecker in a Jupyter environment for teaching, research, and interactive exploration of logical models."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
